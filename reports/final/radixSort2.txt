// int dig = 1
// for(l=0;l<15;l++){
//	j = 1024;
////////////////////////////////////////////
//	for(i=1024;i<2048;i++){
//		if(m[i]&dig == 0){
//			table = m[i]
//			for(k=i;k>j;k--){
//				m[k] = m[k-1];
//			}
//			m[j] = table
//			j ++
//		}
//	}
/////////////////////////////////////////////
//	dig <<1;
// }

// 1:15			// 1:m[i]
// 2:1024		// 2:table/m[k-1]
// 3:l			// 3:k
// 4:i = 1024		// 4:i
// 5:j = 1024		// 5:j
/// 6:2048
/// 7:dig
/////////////////////////////////////////////
/////////////////////////////////////////////


LI 7 (1)
LI 1 (15)
LI 2 (1)
SLL 2 (10)
LI 6 (1)
SLL 6 (11)
MOV 5 2		//j = 1024
MOV 4 2		//i = 1024
//////////////////////////////// l loop

JAL 15

SLL 7 (1)	// dig<<1

ADDI 3 (1)	// l++
CMP 3 1
BLT -5
////////////////////////////////////////
skip
halt


////////////////////////////////////////////////////////
//////////15////(void)insert($4,$5)/////////////////////
LD 2 0(4)
ADDI 4 (1)	//i++(avoid stall)
AND 2 7		//m[i] & dig
BNE 1
ADDI 5 (1)	//if0 j++

////////////////////////////////i loop
LD 2 0(4)
LD 1 0(4)	//m[i]
AND 2 7		//m[i] & dig
BNE 8
/////////////////////////////if
MOV 3 4		// k = i
///////////////////k loop
LD 2 -1(3)	// m[k-1]
ADDI 3 (-1)	//k--
ST 2 1(3)	// m[k] = m[k-1]

CMP 5 3		// j<k
BLT -5
/////////////////////////
ST 1 0(5)	// m[j] = m[i]
ADDI 5 (1)	// j++
///////////////////////////////

ADDI 4 (1)	// i++
CMP 4 6
BLT -15
/////////////////////////////////////
skip
JR

