odule IF(
	input clock, reset, stop,
	// from EX
	input Branch,
	input [15:0] PC_branch,
	// to ID
	output reg [15:0] PC_plus1, instruction);
	
	// update
	function [15:0] PC_next;
	input [15:0] PC_current_plus1;
	begin
		if(Branch == 1'b0)begin
			PC_next = PC_current_plus1;
		end else begin
			PC_next = PC_branch;
		end
		
		if(stop == 1'b1)begin
			PC_next = PC_current_plus1 - 16'b0000_0000_0000_0001;
		end else begin
		end
		
		if(reset_res == 1'b0)begin
			PC_next = 16'b0000_0000_0000_0000;
		end else begin
		end
		
	end
	endfunction

	// PC_plus1, instruction
	wire [15:0] PC_plus1_wire, instruction_wire;
	Fetch f(.clock(clock), .PC_in(PC_next(PC_plus1_wire)), 
			  .PC_out(PC_plus1_wire), .instruction(instruction_wire));
			  
	reg reset_res;
	always @(posedge clock) begin
			if(reset == 1'b0) begin
				reset_res <= 1'b0;
			end else begin
				if(stop == 1'b0) begin
					reset_res <= 1'b1;
				end
			end
	end
	
	always begin
		if(reset_res == 1'b1)begin
			PC_plus1 = PC_plus1_wire;
			instruction = instruction_wire;
		end else begin
			PC_plus1 = 16'b0000_0000_0000_0000;
			instruction = 16'b0000_0000_0000_0000;
		end
	end
	
endmodule

//////////////////////////////////////////////////////////////////////////////
module ID(
	input	clock, reset, stop,
	// from IF
	input [15:0] PC_in, instruction,
	// from WB
	input [1:0] RegWrite,
	input [2:0] WBaddress_in,
	input [15:0] WBdata,
	
	input [15:0] in,
	
	// to EX
	output reg [5:0] control,
	output reg [3:0] ALUcontrol,
	output reg [15:0] PC_out, Rs_Ra, Rd_Rb, immediate,
	output reg [2:0] WBaddress_out,
	
	// to forwarding
	output reg [2:0] forwarding_Rs_Ra,
	output reg [2:0] forwarding_Rd_Rb,
	
	output [2:0] hazard_Rs_Ra,
	output [2:0] hazard_Rd_Rb,
	
	output reg halt,
	output reg out
	);
	
	// control
	wire [3:0] IDcontrol_wire;
	wire [5:0] control_wire;
	wire [3:0] ALUcontrol_wire;
	Control c(.opcode(instruction[15:14]), .Rs_Ra(instruction[13:11]),
				 .Rd_Rb(instruction[10:8]), .opcode3(instruction[7:4]),
				 .IDcontrol(IDcontrol_wire), .control(control_wire), .ALUcontrol(ALUcontrol_wire));
	always @(posedge clock)
	begin
		if(reset == 1'b1 && |instruction)begin
			control = control_wire;
			ALUcontrol = ALUcontrol_wire;
		end else begin
			control = 6'b000000;
			ALUcontrol = 4'b0000; 
		end
		
		if(stop == 1'b1)begin
			control = {control_wire[5], 5'b00000};
			ALUcontrol = ALUcontrol_wire;
		end else begin
		end
	end
	
	// divide controls
	wire RsRa = IDcontrol_wire[3];
	wire [1:0] Imm = IDcontrol_wire[2:1];
	wire RegDst = IDcontrol_wire[0];
	
	// PC
	always @(posedge clock)
	begin
		if(reset == 1'b1)begin
			PC_out = PC_in;
		end else begin
			PC_out = 16'b0000_0000_0000_0000;
		end
	end

	reg [15:0] register [0:7];
	
	reg in_function = 0;
	reg cant_write = 0;
	reg [15:0] PC_saved = 16'b0000_0000_0000_0000;
	reg [15:0] reg_saved[0:4];
	
	// write & read
	always @(posedge clock) 
	begin
		if(reset == 1'b1)begin
			// write
			if(RegWrite[1] == 1'b1 && WBaddress_in != 3'b000)begin
				if(cant_write == 1'b0 | WBaddress_in == 3'b110 | WBaddress_in == 3'b111)begin
					register[WBaddress_in] = WBdata;
				end else begin
				end
			end else begin
			end
			
			// read
			if(RsRa == 1'b0)begin
				Rs_Ra = register[instruction[13:11]];
			end else begin
				Rs_Ra = in;
			end
			Rd_Rb = register[instruction[10:8]];

			// immediate
			case(Imm)
				2'b00: immediate = {12'b0000_0000_0000, instruction[3:0]};
				2'b01: if(instruction[7] == 1'b0)begin
							immediate = {8'b0000_0000, instruction[7:0]};
						 end else begin
							immediate = {8'b1111_1111, instruction[7:0]};
						 end
				2'b10: immediate = {8'b0000_0000, instruction[7:0]};
				2'b11: immediate = PC_saved;
			endcase
			
			if(RegWrite[0] == 1'b1)begin
				// JAL
				if(in_function == 1'b0)begin
					reg_saved[0] = register[1];
					reg_saved[1] = register[2];
					reg_saved[2] = register[3];
					reg_saved[3] = register[4];
					reg_saved[4] = register[5];
				// JR
				end else begin
					cant_write = 1'b0;
				end
				in_function = !in_function;
			end else begin
			end		
			
			if(control_wire[0] == 1'b1)begin
				//JAL
				if(in_function == 1'b0)begin
					PC_saved = PC_in;
				//JR
				end else begin
					PC_saved = 16'b0000_0000_0000_0000;
					register[1] = reg_saved[0];
					register[2] = reg_saved[1];
					register[3] = reg_saved[2];
					register[4] = reg_saved[3];
					register[5] = reg_saved[4];
					cant_write = 1'b1;
				end
			end else begin
			end
		end else begin
			register[1] = 16'b0000_0000_0000_0000;
			register[2] = 16'b0000_0000_0000_0000;
			register[3] = 16'b0000_0000_0000_0000;
			register[4] = 16'b0000_0000_0000_0000;
			register[5] = 16'b0000_0000_0000_0000;
			register[6] = 16'b0000_0000_0000_0000;
			register[7] = 16'b0000_0000_0000_0000;
			
			PC_saved = 16'b0000_0000_0000_0000;
			reg_saved[0] = 16'b0000_0000_0000_0000;
			reg_saved[1] = 16'b0000_0000_0000_0000;
			reg_saved[2] = 16'b0000_0000_0000_0000;
			reg_saved[3] = 16'b0000_0000_0000_0000;
			reg_saved[4] = 16'b0000_0000_0000_0000;
			
			Rs_Ra = 16'b0000_0000_0000_0000;
			Rd_Rb = 16'b0000_0000_0000_0000;
			immediate = 16'b0000_0000_0000_0000;
		end
	end
	
	// WBaddress
	always @(posedge clock)
	begin
		if(reset == 1'b1)begin
			if(RegDst == 1'b0)begin
				WBaddress_out = instruction[10:8];
			end else begin
				WBaddress_out = instruction[13:11];
			end
		end else begin
			WBaddress_out = 3'b000;
		end
	end
	
	// out
	always @(posedge clock)
	begin
		if({instruction[15:14], instruction[7:4]} == 6'b111101)begin
			out = 1'b1;
		end else begin
			out = 1'b0;
		end
	end
	
	// halt
	always
	begin
		if({instruction[15:14], instruction[7:4]} == 6'b111111)begin
			halt = 1'b1;
		end else begin
			halt = 1'b0;
		end
	end
	
	// to forwarding
	always @(posedge clock)
	begin
		forwarding_Rs_Ra = instruction[13:11];
		forwarding_Rd_Rb = instruction[10:8];
	end
	
	// to hazard
	assign hazard_Rs_Ra = instruction[13:11];
	assign hazard_Rd_Rb = instruction[10:8];
endmodule

////////////////////////////////////////////////////////////////////////////////////////
module Control(
	input [1:0] opcode,
	input [2:0] Rs_Ra, Rd_Rb,
	input [3:0] opcode3,
	
	output [3:0] IDcontrol, 
	output [5:0] control,
	output [3:0] ALUcontrol);
	
	////////////////
	//     ID     //
	////////////////
	
	// RsRa
	function RsRa;
	input [1:0] opcode;
	input [3:0] opcode3;
	begin
		// IN
		if({opcode, opcode3} == 6'b111100)begin
			RsRa = 1'b1;
		end else begin
			RsRa = 1'b0;
		end
	end
	endfunction
	
	// Imm
	function [1:0] Imm;
	input [1:0] opcode;
	input [2:0] opcode2, cond;
	begin
		case(opcode)
			2'b00: Imm = 2'b01;
			2'b01: Imm = 2'b01;
					 // JAL
			2'b10: if({opcode2, cond} == 6'b111101)begin
						Imm = 2'b10;
					 // JR
					 end else if({opcode2, cond} == 6'b111110)begin
						Imm = 2'b11;
					 end else begin
						Imm = 2'b01;
					 end
			default: Imm = 2'b00;
		endcase
	end
	endfunction
	
	// RegDst
	function RegDst;
	input [1:0] opcode;
	begin
		// LD
		if(opcode == 2'b00)begin
			RegDst = 1'b1;
		end else begin
			RegDst = 1'b0;
		end
	end
	endfunction
	
	////////////////
	//     EX     //
	////////////////
	
	// ALUSrc
	function ALUSrc;
	input [1:0] opcode;
	input [2:0] opcode2;
	input [1:0] opcode3_3to2;
	begin
		case(opcode)
			2'b00: ALUSrc = 1'b1;
			2'b01: ALUSrc = 1'b1;
					 // LI, ADDI
			2'b10: if(opcode2 == 3'b000 | opcode2 == 3'b001)begin
						ALUSrc = 1'b1;
					 end else begin
						ALUSrc = 1'b0;
					 end
					   // SLL, SLR, SRL, SRA
			default: if(opcode3_3to2 == 2'b10)begin
							ALUSrc = 1'b1;
						end else begin
							ALUSrc = 1'b0;
						end
		endcase
	end
	endfunction
	
	// Branch
	function Branch;
	input [1:0] opcode;
	input [2:0] opcode2;
	begin
	   // BE, BLT, BLE, BNE, B, JAL, JR
		if({opcode, opcode2} == 5'b10111)begin
			Branch = 1'b1;
		end else begin
			Branch = 1'b0;
		end
	end
	endfunction
	
	// ALUcontrol
	function [3:0] set_ALUcontrol;
	input [1:0] opcode;
	input [2:0] opcode2;
	begin
		case(opcode)
			2'b00: set_ALUcontrol = 4'b0000;
			2'b01: set_ALUcontrol = 4'b0000;
			       // ADDI
			2'b10: if(opcode2 == 3'b001)begin
						set_ALUcontrol = 4'b0000;
					 end else begin
					   set_ALUcontrol = 4'b0110;
					 end
			default: set_ALUcontrol = opcode3;
		endcase
	end
	endfunction
	
	////////////////
	//     MA     //
	////////////////
	
	// MemRead
	function MemRead;
	input [1:0] opcode;
	input [2:0] Rs_Ra;
	begin
	   // LD
		if(opcode == 2'b00 && Rs_Ra != 3'b000)begin
			MemRead = 1'b1;
		end else begin
			MemRead = 1'b0;
		end
	end	
	endfunction
	
	// MemWrite
	function MemWrite;
	input [1:0] opcode;
	begin
		// ST
		if(opcode == 2'b01)begin
			MemWrite = 1'b1;
		end else begin
			MemWrite = 1'b0;
		end
	end	
	endfunction
	
	////////////////
	//     WB     //
	////////////////
	
	// RegWrite
	function RegWrite;
	input [1:0] opcode;
	input [2:0] opcode2, cond;
	input [3:0] opcode3;
	begin
		case(opcode)
			2'b00: RegWrite = 1'b1;
			2'b01: RegWrite = 1'b0;
					 // LI, ADDI
			2'b10: if(opcode2 == 3'b000 | opcode2 == 3'b001)begin
						RegWrite = 1'b1;
					 end else begin
						RegWrite = 1'b0;
					 end
					 // CMP, OUT, HLT
			2'b11: if(opcode3 == 4'b0101 | opcode3 == 4'b1101 | opcode3 == 4'b1111)begin
						RegWrite = 1'b0;
					 end else begin
						RegWrite = 1'b1;
					 end
		endcase
	end
	endfunction
	
	// BrAdd
	function BrAdd;
	input [1:0] opcode;
	input [2:0] opcode2, cond;
	begin
		// JAL, JR
		if({opcode, opcode2} == 5'b10111 && (cond == 3'b101 | cond == 3'b110))begin
			BrAdd = 1'b1;
		end else begin
			BrAdd = 1'b0;
		end
	end
	endfunction
	
	assign IDcontrol = {RsRa(opcode, opcode3), Imm(opcode, Rs_Ra, Rd_Rb), RegDst(opcode)};
	assign control = {ALUSrc(opcode, Rs_Ra, opcode3[3:2]), Branch(opcode, Rs_Ra),
							MemRead(opcode, Rs_Ra), MemWrite(opcode),
							RegWrite(opcode, Rs_Ra, Rd_Rb, opcode3), BrAdd(opcode, Rs_Ra, Rd_Rb)};
	assign ALUcontrol = set_ALUcontrol(opcode, Rs_Ra);
endmodule

//////////////////////////////////////////////////////////////////////////
module Fetch(
	input clock,
	input [15:0] PC_in,
	output reg [15:0] PC_out, instruction);
	
	// PC_plus1
	always @(posedge clock)
	begin
		PC_out = PC_in + 16'b0000_0000_0000_0001;
	end
	
	// instruction
	wire [15:0] q;
	ram1 ram(.address(PC_in), .clock(clock), .data(16'b0000_0000_0000_0000), .wren(1'b0), .q(q));
	always begin
		instruction = q;
	end
endmodule

