module Forwarding(

	input [15:0] In_RsRa,
	input [15:0] In_RdRb,

	input [2:0] EX_add_RsRa,
	input [2:0] EX_add_RdRb,
	input MA_RegWrite,
	input [2:0] MA_add,
	input [15:0] MA_data,
	input WB_RegWrite,
	input [2:0] WB_add,
	input [15:0] WB_data,

	output [15:0] Out_RsRa,
	output [15:0] Out_RdRb
);


assign Out_RsRa = (MA_RegWrite==1 && EX_add_RsRa == MA_add)? MA_data :
						(WB_RegWrite==1 && EX_add_RsRa == WB_add)? WB_data :
																			 In_RsRa ;
assign Out_RdRb = (MA_RegWrite==1 && EX_add_RdRb == MA_add)? MA_data :
						(WB_RegWrite==1 && EX_add_RdRb == WB_add)? WB_data :
																			 In_RdRb ;


endmodule
//////////////////////////////////////

module HazardDetection(
	input [5:0] EX_control,
	input [2:0] EX_WBaddress,
	input [2:0] ID_RsRa,
	input [2:0] ID_RdRb,
	
	output stall
);

wire EX_memRead;
assign EX_memRead = EX_control[3];
assign stall = (EX_memRead==1'b1 && 
					(EX_WBaddress==ID_RsRa || 
						EX_WBaddress==ID_RdRb))? 1'b1
														:1'b0;


endmodule

///////////////////////////////////////
module Out(
	input clock,
	input stall,
	input change,
	input [15:0] data,
	output reg [15:0] out
);

always @(posedge clock) begin
	if(change==1'b1 && stall==1'b0) begin
		out <= data;
	end
end

endmodule
///////////////////////////////////////
module Stop(
	input exec,
	output stop);
	
	reg stop_reg = 1'b1;
	always @(posedge exec)
	begin
		stop_reg = !stop_reg;
	end
	
	assign stop = stop_reg;
endmodule
